import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.impute import KNNImputer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, roc_curve, auc


dataset = "dataset.xlsx"
df = pd.read_excel(dataset)

#columns separation
def load_data(dataset):
    X = df[['person_age', 'person_income', 'person_home_ownership',
            'person_emp_length', 'loan_intent', 'loan_grade', 'loan_amnt']]
    y = df['loan_status']
    return X, y

#preprocessing function
def preprocessing(X):
    categorical_columns = ['person_home_ownership', 'loan_intent', 'loan_grade', 'cb_person_default_on_file']
    encoder = OneHotEncoder(sparse_output=False, drop='first') 
    #unsuitable columns are transformed into binary (so the number of columns is multiplied by the number of possible results)
    X_encoded = pd.DataFrame(encoder.fit_transform(X[categorical_columns]),
                             columns=encoder.get_feature_names_out(categorical_columns))
    
    columns_to_impute = ['loan_int_rate', 'person_emp_length']
    data_to_impute = X[columns_to_impute]
    imputer = KNNImputer(n_neighbors=5)
    imputed_data = imputer.fit_transform(data_to_impute)
    X[columns_to_impute] = imputed_data
    return X

